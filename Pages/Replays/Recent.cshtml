@page "/replays/recent"
@using System.Globalization
@using osu.Game.Beatmaps.Legacy
@model ReplayRecentModel

@{
    const int pageCount = ReplayRecentModel.PageCount;
    ViewData["Title"] = $"Recent replays ({pageCount * (Model.PageIndex - 1) + 1} - {Model.PageIndex * pageCount})";
}

<div class="text-3xl">
    <div class="text-center xl:text-left">
        @ViewData["Title"]
        <br/>
        <span class="text-sm">out of (estimated) <b>@Model.TotalCount</b> replays</span>
    </div>
    <br/>
    <br/>
    <div class="text-xs ml-2 xl:ml-0">
        Rows with <span class="bg-green-100">light green</span> background indicate full-combo replays.
    </div>
</div>

@{
    var canGoBack = Model.PageIndex > 1;
}

<div class="grid place-items-end pb-2">
    <div class="mr-2 xl:mr-0">
        @if (canGoBack)
        {
            <a href="?page=@(Model.PageIndex - 1)">
                <button class="h-9 px-6 m-1 bg-blue-700 hover:bg-blue-600 text-white transition-colors duration-150 rounded-lg">
                    &lt; Page @(Model.PageIndex - 1)
                </button>
            </a>
        }
        <span>Page <b>@Model.PageIndex</b></span>
        <a href="?page=@(Model.PageIndex + 1)">
            <button class="h-9 px-6 m-1 bg-blue-700 hover:bg-blue-600 text-white transition-colors duration-150 rounded-lg ">
                Page @(Model.PageIndex + 1) &gt;
            </button>
        </a>
    </div>
</div>

<div class="xl:container mx-auto flex justify-center items-center w-full">
    <table class="table-fixed w-full table [border-spacing:0_theme('spacing.2')]">
        @{
            const string
                cellShowInLargePage = "hidden xl:table-cell",
                cellHideInLargePage = "xl:hidden";
        }
        <thead class="hidden md:table-header-group">
        <tr>
            <th class="border border-green-900 w-1/12 xl:w-14">Mode</th>
            <th class="border border-green-900 w-1/12 xl:w-1/6">Timestamp (in UTC)</th>
            <th class="border border-green-900 w-1/12 @cellShowInLargePage">Score</th>
            <th class="border border-green-900 w-1/12 xl:w-1/6">Username</th>
            <th class="border border-green-900 w-1/12 @cellShowInLargePage">Max combo</th>
            <th class="border border-green-900 w-1/12 @cellShowInLargePage">Accuracy</th>
            <th class="border border-green-900 w-1/12 @cellHideInLargePage">Max combo & accuracy</th>
            <th class="border border-green-900 w-1/12 @cellShowInLargePage">300s</th>
            <th class="border border-green-900 w-1/12 @cellShowInLargePage">100s</th>
            <th class="border border-green-900 w-1/12 @cellShowInLargePage">50s</th>
            <th class="border border-green-900 w-1/12 @cellShowInLargePage">Misses</th>
            <th class="border border-green-900 w-1/12 @cellHideInLargePage">Statistics</th>
            <th class="border border-green-900 w-1/6 xl:w-1/4">Map</th>
            <th class="border border-green-900 w-1/12">Download</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var replay in Model.Replays)
        {
            var beatmap = Model.Maps.TryGetValue(replay.BeatmapHash, out var map) ? map : null;

            <tr class="md:hidden">
                <td class="text-white p-2 rounded-xl"
                    style="background-image:
                        linear-gradient(rgb(0,0,0,0.25), rgb(255,255,255,0.4)),
                        linear-gradient(rgb(0,0,0,0.3), rgb(0,0,0,0.3)), 
                        url('https://assets.ppy.sh/beatmaps/@(beatmap?.BeatmapsetId)/covers/cover@2x.jpg')">
                    <div class="flex justify-between">
                        <div class="text-xl">
                            <a href="/replays/map/@replay.BeatmapHash">
                                @if (beatmap != null)
                                {
                                    <span class="underline">
                                        @beatmap.Title <b>[@beatmap.Difficulty]</b>
                                    </span>
                                }
                                else
                                {
                                    <span class="underline">@replay.BeatmapHash</span>
                                }
                            </a>
                        </div>
                        <div class="flex flex-row items-center gap-1">
                            <div class="flex flex-row items-center">
                                <span>@ReplayRecentModel.Rulesets[replay.Mode].RulesetInfo.Name</span>
                            </div>
                            <div class="flex flex-row items-center">
                                <img class="h-4 mx-auto inline svg-filter-white"
                                     src="@Icons.GetIconPath(replay.Mode)" alt="@ReplayRecentModel.Rulesets[replay.Mode].RulesetInfo.Name"/>
                            </div>
                        </div>
                    </div>
                    <br/>
                    <br/>
                    <div class="flex flex-row justify-between items-end">
                        <div>
                            <span class="text-xl">
                                <b>@replay.MaxCombo</b>x <b class="text-sm">(@replay.Score.ToString("n0", CultureInfo.InvariantCulture))</b>
                            </span>
                            <br/>
                            <b class="text-xl">@replay.Accuracy</b>%
                            <span class="text-sm">
                                (<b>@replay.Count300</b> / <b>@replay.Count100</b> / <b>@replay.Count50</b> / <b>@replay.CountMiss</b>)
                            </span>
                        </div>
                        <div class="text-right">
                            <b>@replay.PlayerName</b>
                            <br/>
                            @replay.Timestamp.ToUniversalTime().ToString($"HH:mm:ss, dd/MM/yyyy", CultureInfo.InvariantCulture)
                        </div>
                    </div>
                </td>
            </tr>

            <tr class="@(replay.PerfectCombo ? "bg-green-100" : "") hidden md:table-row border-gray-300 text-center">
                <td class="border border-gray-300 w-7 xl:w-14">
                    <img class="h-7 mx-auto hidden xl:inline"
                         src="@Icons.GetIconPath(replay.Mode)" alt="@ReplayRecentModel.Rulesets[replay.Mode].RulesetInfo.Name"/>
                    <span class="xl:hidden">
                        @ReplayRecentModel.Rulesets[replay.Mode].RulesetInfo.Name
                    </span>
                </td>
                <td class="border border-gray-300 p-1.5 w-1/6">
                    @replay.Timestamp.ToUniversalTime().ToString($"HH:mm:ss, dd/MM/yyyy", CultureInfo.InvariantCulture)
                </td>
                <td class="border border-gray-300 p-2 @cellShowInLargePage">
                    @replay.Score.ToString("n0", CultureInfo.InvariantCulture)
                </td>
                <td class="border border-gray-300 p-2">
                    @replay.PlayerName
                </td>
                <td class="border border-gray-300 p-2 @cellShowInLargePage">@replay.MaxCombo</td>
                <td class="border border-gray-300 p-2 @cellShowInLargePage">@replay.Accuracy%</td>
                <td class="border border-gray-300 p-0 w-1/12 @cellHideInLargePage">
                    <b>@replay.MaxCombo</b>x
                    <br/>
                    <b>@replay.Accuracy</b>%
                </td>
                <td class="border border-gray-300 p-0 w-1/12 @cellShowInLargePage">@replay.Count300</td>
                <td class="border border-gray-300 p-0 w-1/12 @cellShowInLargePage">@replay.Count100</td>
                <td class="border border-gray-300 p-0 w-1/12 @cellShowInLargePage">@replay.Count50</td>
                <td class="border border-gray-300 p-0 w-1/12 @cellShowInLargePage">@replay.CountMiss</td>
                <td class="border border-gray-300 p-0 w-1/12 @cellHideInLargePage">
                    <b>@replay.Score.ToString("n0", CultureInfo.InvariantCulture)</b>
                    <br/>
                    <b>@replay.Count300</b> / <b>@replay.Count100</b> / <b>@replay.Count50</b> / <b>@replay.CountMiss</b>
                </td>
                @{
                    <td class="border border-gray-300 p-2 w-1/4 @(beatmap == null ? "bg-yellow-200" : "")">
                        <a href="/replays/map/@replay.BeatmapHash"
                           class="underline text-black hover:text-blue-800 visited:text-purple-600">
                            @if (beatmap != null)
                            {
                                <span>
                                    @beatmap.Title <b>[@beatmap.Difficulty]</b>
                                </span>
                            }
                            else
                            {
                                <span>Custom map</span>
                            }
                            @{
                                var mods = ReplayRecentModel.ModsFromModbits(ReplayRecentModel.Rulesets[replay.Mode], (LegacyMods)replay.Mods);
                                var acronyms = string.Join(", ", mods.Select(mod => mod.Acronym));
                                if ((replay.Mods & (1 << 29)) != 0)
                                    acronyms += (string.IsNullOrEmpty(acronyms) ? "" : ", ") + "V2";
                            }
                            @(string.IsNullOrWhiteSpace(acronyms) ? "" : "+" + acronyms)
                        </a>
                    </td>
                }
                <td class="border border-gray-300 p-2 w-1/12">
                    <a href="https://poetry-rewind.cipher.moe/@replay.BeatmapHash/@replay.Sha256">
                        <span class="underline" title="@replay.Sha256.ToLowerInvariant()">
                            @replay.Sha256[..7].ToLowerInvariant()
                        </span>
                        <br class="inline xl:hidden"/>
                        <i class="fa fa-download" aria-hidden="true"></i>
                    </a>
                </td>
            </tr>
        }
        </tbody>
    </table>
</div>
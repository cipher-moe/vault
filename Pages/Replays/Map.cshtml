@page "/replays/map/{hash?}"
@using System.Globalization
@using Humanizer
@using osu.Game.Beatmaps.Legacy
@model ReplayMapModel

@{
    var beatmap = Model.Map;
    var hasMap = beatmap != null;
    ViewData["Title"] = $"Replays for {(hasMap ? $"{beatmap!.Title} [{beatmap.Difficulty}]" : Model.Hash)}";
    ViewData["Description"] = $@"Found {Model.Replays.Length} " 
                              + $"{(Model.Replays.Length > 1 ? "replay".Pluralize() : "replay")} with a maximum combo of" 
                              + Model.Replays.Max(rp => rp.MaxCombo)
                              + $"x and accuracy of {Model.Replays.Max(rp => double.Parse(rp.Accuracy)):0.##}%";
}
@if (hasMap)
{
    <style>
            html {
                background-image: linear-gradient(rgba(255,255,255,.8), rgba(255,255,255,.9)), 
                    url("https://assets.ppy.sh/beatmaps/@beatmap!.BeatmapsetId/covers/cover@2x.jpg");
                background-size: cover;
                background-repeat: no-repeat;
                background-attachment: fixed;
            } 
        </style>
    <div class="text-3xl">
        @Model.Replays.Length replay@(Model.Replays.Length > 1 ? "s" : "") for
        <a class="underline" href="https://osu.ppy.sh/b/@beatmap.BeatmapId">@beatmap.Title [@beatmap.Difficulty]</a>
        <br/>
        <span class="text-sm">out of (estimated) <b>@Model.TotalCount</b> replays</span>
    </div>
    <br/>
    <div class="py-1">
        <span class="tracking-wider border-red-400 border-2 px-4 py-1 text-md rounded mr-2 font-semibold">
            <b>@($"{beatmap.StarRating:F2}")</b> â˜…
        </span>
        <span class="tracking-wider border-red-400 border-2 px-4 py-1 text-md rounded mr-2 font-semibold">
            CS <b>@beatmap.CircleSize</b>
        </span>
        <span class="tracking-wider border-blue-400 border-2 px-4 py-1 text-md rounded mr-2 font-semibold">
            AR <b>@beatmap.ApproachRate</b>
        </span>
        <span class="tracking-wider border-green-400 border-2 px-4 py-1 text-md rounded mr-2 font-semibold">
            OD <b>@beatmap.OverallDifficulty</b>
        </span>
        <span class="tracking-wider border-yellow-500 border-2 px-4 py-1 text-md rounded mr-2 font-semibold">
            HP <b>@beatmap.HpDrain</b>
        </span>
        <span class="tracking-wider border-indigo-400 border-2 px-4 py-1 text-md rounded mr-2 font-semibold">
            <i class="far fa-clock"></i> <b>@beatmap.TotalLength.ToString(@"mm\:ss")</b>
        </span>
        <span class="tracking-wider border-gray-500 border-2 px-4 py-1 text-md rounded mr-2 font-semibold">
            BPM <b>@beatmap.Bpm</b>
        </span>
        <span class="tracking-wider border-purple-400 border-2 px-4 py-1 text-md rounded mr-2 font-semibold">
            Max combo : <b>@beatmap.MaxCombo</b><span class="font-normal">x</span>
        </span>
    </div>
}
else
{
    <div class="text-3xl">
        @ViewData["Title"]
    </div>
}
<br/>
<div class="text-xs">
    Rows wrapped in <span class="text-purple-400 underline">purple</span> borders are top scores for the respective mod combination.
    <br />
    Rows with <b>bold</b> text indicate full-combo replays.
</div>
<br/>
<div class="md:container mx-auto flex justify-center items-center w-full">
    @if (Model.Replays.Length != 0)
    {
        <table class="table-fixed w-full border-collapse">
            <thead>
            <tr>
                <th class="border border-green-900 w-1/6">Timestamp (in UTC)</th>
                <th class="border border-green-900 w-1/12">Score</th>
                <th class="border border-green-900 w-1/6">Username</th>
                <th class="border border-green-900 w-1/12">Max combo</th>
                <th class="border border-green-900 w-1/12">Accuracy</th>
                <th class="border border-green-900 w-1/12">Mods</th>
                <th class="border border-green-900 w-1/12">300s</th>
                <th class="border border-green-900 w-1/12">100s</th>
                <th class="border border-green-900 w-1/12">50s</th>
                <th class="border border-green-900 w-1/12">Misses</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var replay in Model.Replays)
            {
                var isTopScore = Model.TopModScores[(LegacyMods)replay.Mods] == replay.Score;
                
                <tr class="@(replay.PerfectCombo ? "font-bold" : "") @(isTopScore ? "border-purple-400 border-2" : "border-gray-300") text-center">
                    <td class="border border-gray-300 p-1.5 w-1/6">
                        @replay.Timestamp.ToUniversalTime().ToString($"HH:mm:ss, dd/MM/yyyy", CultureInfo.InvariantCulture)
                    </td>
                    <td class="border border-gray-300 p-2">
                        @replay.Score.ToString("n0", CultureInfo.InvariantCulture)
                    </td>
                    <td class="border border-gray-300 p-2">
                        @replay.PlayerName
                    </td>
                    <td class="border border-gray-300 p-2">
                        @replay.MaxCombo
                    </td>
                    <td class="border border-gray-300 p-2">
                        @replay.Accuracy%
                    </td>
                    <td class="border border-gray-300 p-2">
                        @{
                            var mods = ReplayRecentModel.ModsFromModbits(ReplayRecentModel.Rulesets[replay.Mode], (LegacyMods)replay.Mods);
                            var acronyms = string.Join(", ", mods.Select(mod => mod.Acronym));
                            if ((replay.Mods & (1 << 29)) != 0)
                                acronyms += (string.IsNullOrEmpty(acronyms) ? "" : ", ") + "V2";
                        }
                        @(string.IsNullOrWhiteSpace(acronyms) ? "None" : acronyms)
                    </td>
                    <td class="border border-gray-300 p-0 w-1/12 bg-blue-100">@replay.Count300</td>
                    <td class="border border-gray-300 p-0 w-1/12 bg-green-100">@replay.Count100</td>
                    <td class="border border-gray-300 p-0 w-1/12 bg-yellow-100">@replay.Count50</td>
                    <td class="border border-gray-300 p-0 w-1/12 bg-red-100">@replay.CountMiss</td>
                </tr>
            }
            </tbody>
        </table>
    }
    else
    {
        <div>There's no replay for map with hash @Model.Hash.</div>
    }
</div>
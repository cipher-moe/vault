@page "/replays/map/{hash?}"
@using System.Globalization
@using Humanizer
@using osu.Game.Beatmaps.Legacy
@model ReplayMapModel

@{
    const string clickableColumnHeaderTextStyle = "text-blue-800 hover:text-blue-600";
    const string chosenColumnHeaderTextStyle = "underline text-white";
    const string chosenColumnHeaderCellStyle = "bg-gray-200";
}

@{
    var beatmap = Model.Map;
    var hasMap = beatmap != null;
    var hasReplay = Model.SortedReplays.Any(mode => mode.Value.Length != 0);
    ViewData["Title"] = $"Replays for {(hasMap ? $"{beatmap!.Title} [{beatmap.Difficulty}]" : Model.Hash)}";
    ViewData["Description"] = $@"Found {Model.Replays.Length} "
                              + $"{(Model.Replays.Length > 1 ? "replay".Pluralize() : "replay")} with a maximum combo of"
                              + Model.Replays.Max(rp => rp.MaxCombo)
                              + $"x and accuracy of {Model.Replays.Max(rp => double.Parse(rp.Accuracy)):0.##}%";
}
@if (hasMap)
{
    <style>
            html {
                background-image: linear-gradient(rgba(255,255,255,.8), rgba(255,255,255,.9)), 
                    url("https://assets.ppy.sh/beatmaps/@beatmap!.BeatmapsetId/covers/cover@2x.jpg");
                background-size: cover;
                background-repeat: no-repeat;
                background-attachment: fixed;
            } 
        </style>
    <div class="text-3xl text-center xl:text-left">
        @Model.Replays.Length replay@(Model.Replays.Length > 1 ? "s" : "") for
        <a class="underline" href="https://osu.ppy.sh/b/@beatmap.BeatmapId">@beatmap.Title [@beatmap.Difficulty]</a>
        <br/>
        <span class="text-sm">out of (estimated) <b>@Model.TotalCount</b> replays</span>
    </div>
    <br/>
    <div class="py-1">
        <span class="tracking-wider border-red-400 border-2 px-4 py-1 text-md rounded mr-2 font-semibold">
            <b>@($"{beatmap.StarRating:F2}")</b> â˜…
        </span>
        <span class="tracking-wider border-red-400 border-2 px-4 py-1 text-md rounded mr-2 font-semibold">
            CS <b>@beatmap.CircleSize</b>
        </span>
        <span class="tracking-wider border-blue-400 border-2 px-4 py-1 text-md rounded mr-2 font-semibold">
            AR <b>@beatmap.ApproachRate</b>
        </span>
        <span class="tracking-wider border-green-400 border-2 px-4 py-1 text-md rounded mr-2 font-semibold">
            OD <b>@beatmap.OverallDifficulty</b>
        </span>
        <span class="tracking-wider border-yellow-500 border-2 px-4 py-1 text-md rounded mr-2 font-semibold">
            HP <b>@beatmap.HpDrain</b>
        </span>
        <span class="tracking-wider border-indigo-400 border-2 px-4 py-1 text-md rounded mr-2 font-semibold">
            <i class="far fa-clock"></i> <b>@beatmap.TotalLength.ToString(@"mm\:ss")</b>
        </span>
        <span class="tracking-wider border-gray-500 border-2 px-4 py-1 text-md rounded mr-2 font-semibold">
            BPM <b>@beatmap.Bpm</b>
        </span>
        <span class="tracking-wider border-purple-400 border-2 px-4 py-1 text-md rounded mr-2 font-semibold">
            Max combo : <b>@beatmap.MaxCombo</b><span class="font-normal">x</span>
        </span>
    </div>
}
else
{
    <div class="text-3xl">
        @ViewData["Title"]
    </div>
}
<br/>
<div class="text-xs">
    Rows wrapped in <span class="text-purple-400 underline"><b>purple</b></span> borders are top scores for the respective mod combination.
    <br/>
    @if (Model.Replays.Any(replay => replay.PerfectCombo))
    {
        <span>Rows fully in <b>bold</b> text indicate full-combo replays.</span>
        <br />
    }
    Click column headers in <span class="@clickableColumnHeaderTextStyle"><b>blue</b></span> to sort by the respective category. 
</div>
<br/>
<div class="xl:container mx-auto flex justify-center items-center w-full">
    @if (hasReplay)
    {
        const string
            cellShowInLargePage = "hidden xl:table-cell",
            cellHideInLargePage = "xl:hidden";
        <table class="table-fixed w-full border-collapse">
            <thead>
            <tr>
                @{
                    var sortMode = Model.Order;
                    bool isTime = sortMode == ReplayMapModel.SortBy.Timestamp,
                        isScore = sortMode == ReplayMapModel.SortBy.Score,
                        isCombo = sortMode == ReplayMapModel.SortBy.Combo,
                        isAccuracy = sortMode == ReplayMapModel.SortBy.Accuracy,
                        isMiss = sortMode == ReplayMapModel.SortBy.Miss;
                }
                <th class="border border-green-900 w-14">Mode</th>
                <th class="border border-green-900 w-1/6 @(isTime ? chosenColumnHeaderCellStyle : "")">
                    <a 
                        href="?sort=timestamp"
                        class="@clickableColumnHeaderTextStyle @(isTime ? chosenColumnHeaderTextStyle : "")">
                        Timestamp (in UTC)
                    </a>
                </th>
                <th class="border border-green-900 w-1/12 @(isScore ? chosenColumnHeaderCellStyle : "")">
                    <a
                        href="?sort=score"
                        class="@clickableColumnHeaderTextStyle @(isScore ? chosenColumnHeaderTextStyle : "")">
                        Score
                    </a>
                </th>
                <th class="border border-green-900 w-1/6">Username</th>
                <th class="border border-green-900 w-1/12 @(isCombo ? chosenColumnHeaderCellStyle : "")">
                    <a
                        href="?sort=combo"
                        class="@clickableColumnHeaderTextStyle @(isCombo ? chosenColumnHeaderTextStyle : "")">
                        Max combo
                    </a>
                </th>
                <th class="border border-green-900 w-1/12 @(isAccuracy ? chosenColumnHeaderCellStyle : "")">
                    <a
                        href="?sort=accuracy"
                        class="@clickableColumnHeaderTextStyle @(isAccuracy ? chosenColumnHeaderTextStyle : "")">
                        Accuracy
                    </a>
                </th>
                <th class="border border-green-900 w-1/12">Mods</th>
                <th class="border border-green-900 w-1/12 @cellShowInLargePage">300s</th>
                <th class="border border-green-900 w-1/12 @cellShowInLargePage">100s</th>
                <th class="border border-green-900 w-1/12 @cellShowInLargePage">50s</th>
                <th class="border border-green-900 w-1/12 @cellHideInLargePage">Hit counts</th>
                <th class="border border-green-900 w-1/12 @(isMiss ? chosenColumnHeaderCellStyle : "")">
                    <a 
                        href="?sort=miss"
                        class="@clickableColumnHeaderTextStyle @(isMiss ? chosenColumnHeaderTextStyle : "")">
                        Misses
                    </a>
                </th>
                <th class="border border-green-900 w-1/12">Download</th>
            </tr>
            </thead>
            <tbody>

            @foreach (var (mode, replays) in Model.SortedReplays)
            {
                var maxScore = replays.Max(rep => rep.Score);
                var maxCombo = replays.Max(rep => rep.MaxCombo);
                var maxAccuracy = replays.Max(rep => double.Parse(rep.Accuracy)).ToString("0.###");
                var minMiss = replays.Min(rep => rep.CountMiss);
                
                @foreach (var replay in replays)
                {
                    var isTopScore = Model.TopModScores[(LegacyMods)replay.Mods] == replay.Score;

                    <tr class="@(replay.PerfectCombo ? "font-bold" : "") @(isTopScore ? "border-purple-400 border-2" : "border-gray-300") text-center">
                        <td class="border border-gray-300">
                            <img class="h-7 mx-auto" src="@Icons.GetIconPath(replay.Mode)" alt="@ReplayRecentModel.Rulesets[replay.Mode].RulesetInfo.Name"/>
                        </td>
                        <td class="border border-gray-300 p-1.5 w-1/6">
                            @replay.Timestamp.ToUniversalTime().ToString($"HH:mm:ss, dd/MM/yyyy", CultureInfo.InvariantCulture)
                        </td>
                        <td class="border border-gray-300 p-2 @(replay.Score == maxScore ? "font-bold" : "")">
                            @replay.Score.ToString("n0", CultureInfo.InvariantCulture)
                        </td>
                        <td class="border border-gray-300 p-2">
                            @replay.PlayerName
                        </td>
                        <td class="border border-gray-300 p-2 @(replay.MaxCombo == maxCombo ? "font-bold" : "")">
                            @replay.MaxCombo
                        </td>
                        <td class="border border-gray-300 p-2 @(replay.Accuracy == maxAccuracy ? "font-bold" : "")">
                            @replay.Accuracy%
                        </td>
                        <td class="border border-gray-300 p-2">
                            @{
                                var mods = ReplayRecentModel.ModsFromModbits(ReplayRecentModel.Rulesets[replay.Mode], (LegacyMods)replay.Mods);
                                var acronyms = string.Join(", ", mods.Select(mod => mod.Acronym));
                                if ((replay.Mods & (1 << 29)) != 0)
                                    acronyms += (string.IsNullOrEmpty(acronyms) ? "" : ", ") + "V2";
                            }
                            @(string.IsNullOrWhiteSpace(acronyms) ? "None" : acronyms)
                        </td>
                        <td class="border border-gray-300 p-0 w-1/12 bg-blue-100 @cellShowInLargePage">@replay.Count300</td>
                        <td class="border border-gray-300 p-0 w-1/12 bg-green-100 @cellShowInLargePage">@replay.Count100</td>
                        <td class="border border-gray-300 p-0 w-1/12 bg-yellow-100 @cellShowInLargePage">@replay.Count50</td>
                        <td class="border border-gray-300 p-2 @cellHideInLargePage">
                            <b>@replay.Count300</b> - <b>@replay.Count100</b> - <b>@replay.Count50</b>
                        </td>
                        <td class="border border-gray-300 p-0 w-1/12 bg-red-100 @(replay.CountMiss == minMiss ? "font-bold" : "")">
                            @replay.CountMiss
                        </td>
                        <td class="border border-gray-300 p-2 w-1/12">
                            <a href="https://poetry-rewind.cipher.moe/@Model.Hash/@replay.Sha256">
                                <span class=@chosenColumnHeaderTextStyle title="@replay.Sha256.ToLowerInvariant()">
                                    @replay.Sha256[..7].ToLowerInvariant()
                                </span>
                                <i class="fa fa-download" aria-hidden="true"></i>
                            </a>
                        </td>
                    </tr>
                }
            }
            </tbody>
        </table>
    }
    else
    {
        <div>There's no replay for map with hash @Model.Hash.</div>
    }
</div>